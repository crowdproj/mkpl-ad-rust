{{#-first}}
        let boundary = uuid::Uuid::new_v4().to_string();
        let mut body_parts = vec![];

{{/-first}}
{{#required}}
        {
{{/required}}
{{^required}}
        if let Some({{{paramName}}}) = param_{{{paramName}}} {
{{/required}}
            let part = Part {
                headers: {
                    let mut h = HeaderMap::new();
                    h.insert(
                        CONTENT_TYPE, 
                        HeaderValue::from_static("{{{contentType}}}")
                    );
                    h.insert(
                        HeaderName::from_static("content-id"),
                        HeaderValue::from_str("{{{baseName}}}").unwrap()
                    );
                    h
                },
                {{#isBinary}}
                body: {{#required}}param_{{/required}}{{{paramName}}}.clone(),
                {{/isBinary}}
                {{^isBinary}}
                body: serde_json::to_vec(&{{{paramName}}}).unwrap(),
                {{/isBinary}}
            };
            body_parts.push(part);
        }
{{#-last}}

        let mut body = Vec::new();
        body.extend_from_slice(b"\r\n--");
        body.extend_from_slice(boundary.as_bytes());
        
        for part in body_parts {
            body.extend_from_slice(b"\r\n");
            for (key, value) in part.headers {
                body.extend_from_slice(key.as_str().as_bytes());
                body.extend_from_slice(b": ");
                body.extend_from_slice(value.as_bytes());
                body.extend_from_slice(b"\r\n");
            }
            body.extend_from_slice(b"\r\n");
            body.extend_from_slice(&part.body);
            body.extend_from_slice(b"\r\n--");
            body.extend_from_slice(boundary.as_bytes());
        }
        
        body.extend_from_slice(b"--\r\n");
{{/-last}}
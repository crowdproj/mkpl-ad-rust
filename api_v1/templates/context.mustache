use hyper::service::Service;
use std::future::Future;
use std::task::{Context, Poll};
use std::marker::PhantomData;

pub struct MakeAddContext<T> {
    inner: T,
}

impl<T> MakeAddContext<T> {
    pub fn new(inner: T) -> Self {
        MakeAddContext { inner }
    }
}

impl<T, Target> Service<Target> for MakeAddContext<T>
where
    T: Service<Target> + Clone + Send + 'static,
    T::Future: Send + 'static,
{
    type Response = AddContext<T::Response>;
    type Error = T::Error;
    type Future = futures::future::BoxFuture<'static, Result<Self::Response, Self::Error>>;

    fn call(&self, target: Target) -> Self::Future {
        let service = self.inner.clone();
        Box::pin(async move {
            Ok(AddContext::new(service.call(target).await?))
        })
    }
}

pub struct AddContext<T> {
    inner: T,
}

impl<T> AddContext<T> {
    pub fn new(inner: T) -> Self {
        AddContext { inner }
    }
}

impl<T, ReqBody> Service<ReqBody> for AddContext<T>
where
    T: Service<ReqBody> + Clone + Send + 'static,
    T::Future: Send + 'static,
{
    type Response = T::Response;
    type Error = T::Error;
    type Future = T::Future;

    fn call(&self, req: ReqBody) -> Self::Future {
        self.inner.call(req)
    }
}
